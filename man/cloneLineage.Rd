% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cloneLineage.R
\name{cloneLineage}
\alias{cloneLineage}
\title{Function to analyse B cell clone lineages, by producing an alignment and infering a phylogenetic tree.}
\usage{
cloneLineage(
  input,
  outputFolder,
  species = "Human",
  minCloneSize = 10,
  whichClones = NULL,
  ignoreClones = NULL,
  colourSpecification,
  sequenceColumn,
  cloneIdColumn,
  germlineIdColumn = "V.GENE.and.allele",
  labelColumn = NULL,
  germlineSet = NULL,
  algorithm = "ClustalOmega",
  plotType = "phylogram",
  plotFormat = "png",
  gatherPlots = TRUE,
  useTempDir = TRUE,
  treeConstruction = list(type = "dnapars", parameters = NULL),
  makeAlignmentPDFConstruction = list(makeAlignmentPDF = FALSE)
)
}
\arguments{
\item{input}{Matrix / data frame with values.}

\item{outputFolder}{Parent folder, in which the clones are to be deposited.}

\item{species}{Either "Bos_taurus", "Gallus_gallus", "Homo_sapiens", "Mus_musculus", "Oryctolagus_cuniculus", "Sus_scrofa." (default: "Homo_sapiens").}

\item{minCloneSize}{Minimum clone size to be considered, clones with less members are not processed (default: 10).}

\item{whichClones}{If not \code{NULL} but a vector of clone IDs (must match the levels in column "cloneIdColumn"), only these clones are considered. Note, that parameter \code{minCloneSize} is still in effect.}

\item{ignoreClones}{This parameter can be set to one of the following:
\describe{
  \item{\code{NULL}}{No clones will be ignored and all that match the minimum size specified will be calculated. This is the default.}
  \item{"completed"}{The program will try to load the file "clones_completed.csv" in the directory specified by \code{outputFolder}. If found, it will ignore clones that are in the "cloneID" column of this file. If the file has not been generated yet or deleted, the program and will proceed with all clones. The file "clones_completed.csv" is generated and updated automatically by this function.}
  \item{A vector of clone IDs}{Any clone ID in this vector will not be considered.}
}
Note, that this parameter must be \code{NULL} if parameter \code{whichClones} is specified.}

\item{colourSpecification}{List with two elements:
\describe{
  \item{colours}{Named list, where the levels are the names and the HTML colour the value.}
  \item{coloursColumn}{Name of the column, which holds the levels for colouring.}
  \item{germlineColour}{The HTML colour value of the germline sequence.}
}}

\item{sequenceColumn}{Name of the column holding the sequences.}

\item{cloneIdColumn}{Name of the column holding the clone IDs.}

\item{germlineIdColumn}{Name of column holding the germline identifier (default: "V.GENE.and.allele").}

\item{labelColumn}{Name of the column holding the labels for the plots. If \code{NULL}, the index will be used.}

\item{germlineSet}{Optional, filepath pointing to a FASTA file containing germline sequences to be used.}

\item{algorithm}{Either "ClustalOmega" or "ClustalW" (pretty slow, though), specifying the alignment algorithm (default: "ClustalOmega").}

\item{plotType}{Either "phylogram", "cladogram", "fan" or "radial", specifying the layout of the phylogenetic tree (default: "phylogram").}

\item{plotFormat}{Either 'png' or 'pdf'. (default: 'png')}

\item{gatherPlots}{If \code{TRUE}, the generated plots will be copied from the individual clone folders to a folder "plots" in the output directory (default: \code{TRUE}).}

\item{useTempDir}{If \code{TRUE}, generate temporary directory and write results there. (default: \code{TRUE})}

\item{treeConstruction}{A list with the following elements:
\describe{
  \item{type}{"simple", "dnapars" or "igphyml". "simple" refers to a neighbour-joining tree; "dnapars" constructs a maximum parsimony tree using the phylip "dnapars" program (a local installation of the program is required). "igphyml" constructs a maximum likelihood tree taking into account mutational hotspot contexts in immunoglobulins, but is the most time consuming. Default "dnapars".}
  \item{parameters}{List of parameters. If \code{type} is "simple", always \code{NULL}. If \code{type} is "dnapars", an element \code{collapseAndReplace} can be set, which is either TRUE (default) or FALSE. This controls whether identical sequences are collapsed prior to tree construction, and subsequently be placed back into the tree as sister nodes of its duplicates. This is recommended to save computational time while preserving accuracy of tree construction. If \code{type} is "igphyml", an element \code{accuracy} can be set, which is either "basic", "high" or "extreme" (see manual of function \link{IgPhyML} for details).}
}}

\item{makeAlignmentPDFConstruction}{A list with the following elements:
\describe{
  \item{makeAlignmentPDF}{If \code{TRUE}, an alignment as PDF is printed out (default: \code{TRUE}).}
}}
}
\description{
Function to analyse B cell clone lineages, by producing an alignment and infering a phylogenetic tree.
}
\examples{
\dontrun{ cloneLineage <- function( input = input,
                          outputFolder = "~/Desktop/out",
                          species = "Homo_sapiens",
                          minCloneSize = 300,
                          colourSpecification = list( colours = list( "IgA" = "#0000FF",
                                                                      "IgG" = "#FF0000",
                                                                      "IgM" = "#00FF00" ),
                                                      coloursColumn = "Class",
                                                      germlineColour = "#AAAAAA" ),
                          sequenceColumn = "Seqs",
                          cloneIdColumn = "CloneID",
                          germlineIdColumn = "V.GENE.and.allele",
                          labelColumn = "SeqID",
                          algorithm = "ClustalOmega",
                          plotType = "fan",
                          gatherPlots = TRUE,
                          treeConstruction = list( "type" = "igphyml",
                                                   "parameters" = list( "accuracy" = "basic" ) ),
                          makeAlignmentPDFConstruction = list( "makeAlignmentPDF" = FALSE ) )}

}
